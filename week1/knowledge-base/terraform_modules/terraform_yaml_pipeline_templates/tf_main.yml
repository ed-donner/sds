parameters:
  terraformVersion: # Required - Terraform version e.g. "1.8.0"
  pool: # Required - Agent pool name e.g. "DevOpsAgentPoolName"
  environment_name: #Required - Environment name e.g. "MDS-DEV"
  environment_name_Job: #Required - Environment name for the job e.g. "MDS_DEV_STORAGEACCT"
  root_directory: #Required - Root directory of the Terraform files e.g. "/Market_Data_System/003_MDS_StorageAccounts/"
  tfvarFile: #Required - Terraform variable file name e.g. "storageaccounts.tf.tfvars"
  service_connection_name: #Required - Azure DevOps service connection name e.g. "cl-axso-az-devops-tim-infra-modules-spi"
  backend_resource_group: "axso-prod-appl-tim-infra-modules-rg" # Default - backend resource group name (Cloud Infra Subscription)
  backend_storage_accountname: "axso4prod4appl4tim4sa" # Default - backend storage account name (Cloud Infra Subscription)
  container_name: "terraform-tim-infra-modules" # Default - container name (Cloud Infra Subscription)
  container_key: #Required - State file name e.g. "MDS/mds_dev_storage_accounts.tfstate"
  tflint_version: 0.53.0
  terraform_docs_version: 0.18.0

  
stages:
  - stage: validate
    jobs:
    - template: tf_validate.yml
      parameters:
        container_name: ${{ parameters.container_name }}
        container_key: ${{ parameters.container_key }}
        environment_name: ${{ parameters.environment_name }}
        tfvarFile: ${{ parameters.tfvarFile }}
        root_directory: ${{ parameters.root_directory }}
        service_connection_name: ${{ parameters.service_connection_name }}
        backend_resource_group: ${{ parameters.backend_resource_group }}
        backend_storage_accountname: ${{ parameters.backend_storage_accountname }}
        terraformVersion: ${{ parameters.terraformVersion }}
        pool: ${{ parameters.pool }}
        tflint_version: ${{ parameters.tflint_version }}        

  - stage: Format_Code
    condition: and(
                 succeeded(), 
                 eq(variables['terraform_format'], 'true'),
                 startswith(variables['Build.SourceBranch'], 'refs/heads/feature')
                )
    dependsOn: "validate"
    jobs:
    - template: tf_format_code.yml
      parameters:
        pool: ${{ parameters.pool }}
        terraformVersion: ${{ parameters.terraformVersion }}

  - stage: deploy
    condition: |
      and(succeeded(),
        ne(variables['Build.Reason'], 'PullRequest'),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/feature')
        ),
        eq(dependencies.validate.outputs['Validate.ChangeDetection.tf_haschg'], 'True')        
      )
    dependsOn: "validate"
    jobs:
      - deployment: "${{ parameters.environment_name_job }}_DEPLOY"
        pool: ${{ parameters.pool }}
        displayName: Deploy
        environment: ${{ parameters.environment_name }}
        strategy:
          runOnce:
            deploy:
              steps:
              - template: tf_deploy.yml
                parameters:
                  container_name: ${{ parameters.container_name }}
                  container_key: ${{ parameters.container_key }}
                  environment_name: ${{ parameters.environment_name }}
                  tfvarFile: ${{ parameters.tfvarFile }}
                  root_directory: ${{ parameters.root_directory }}
                  service_connection_name: ${{ parameters.service_connection_name }}
                  backend_resource_group: ${{ parameters.backend_resource_group }}
                  backend_storage_accountname: ${{ parameters.backend_storage_accountname }}
                  terraformVersion: ${{ parameters.terraformVersion }}
        

  - stage: Terraform_Docs
    condition: and(
                 succeeded(), 
                 eq(variables['terraform_docs'], 'true'),
                 startswith(variables['Build.SourceBranch'], 'refs/heads/feature')
                )
    dependsOn: "deploy"
    jobs:
    - template: tf_docs.yml
      parameters:
        pool: ${{ parameters.pool }}
        terraform_docs_version: ${{ parameters.terraform_docs_version }}

  - stage: destroy
    condition: |
      and(
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/dev'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startswith(variables['Build.SourceBranch'], 'refs/heads/feature')
        ),
        eq(variables['destroy'], 'true'),
        and(succeeded('validate'), succeeded('deploy'))
      )
    dependsOn: ["deploy", "validate"]
    jobs:
      - deployment: "${{ parameters.environment_name_job }}_DESTROY"
        pool: ${{ parameters.pool }}
        displayName: Destroy
        environment: ${{ parameters.environment_name }}
        strategy:
          runOnce:
            deploy:
              steps:
              - template: tf_destroy.yml
                parameters:
                  container_name: ${{ parameters.container_name }}
                  container_key: ${{ parameters.container_key }}
                  environment_name: ${{ parameters.environment_name }}
                  tfvarFile: ${{ parameters.tfvarFile }}
                  root_directory: ${{ parameters.root_directory }}
                  service_connection_name: ${{ parameters.service_connection_name }}
                  backend_resource_group: ${{ parameters.backend_resource_group }}
                  backend_storage_accountname: ${{ parameters.backend_storage_accountname }}
                  terraformVersion: ${{ parameters.terraformVersion }}        


